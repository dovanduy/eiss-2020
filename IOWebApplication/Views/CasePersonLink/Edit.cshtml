@model CasePersonLink
@using IOWebApplication.Infrastructure.Data.Models.Cases
@using IOWebApplication.Extensions
@{
    IAccessControl access = (IAccessControl)ViewBag.AccessControl;

    if (Model.Id > 0)
    {
        ViewData["Title"] = access.CanChange ? "Редакция" : "Преглед";
    }
    else
    {
        ViewData["Title"] = "Добавяне";
    }
    var breadcrumbs = (List<BreadcrumbsVM>)ViewBag.breadcrumbs;
}

@section breadcrumb{
    @if (ViewBag.breadcrumbs != null)
    {
        <partial name="Breadcrumbs" model="@(List<IOWebApplication.Infrastructure.Models.ViewModels.Common.BreadcrumbsVM>)ViewBag.breadcrumbs" />
    }
}

<div class="row">
    <div class="col-md-6">
        <form asp-action="Edit" method="post">
            @Html.ValidationSummary()
            @Html.HiddenFor(x => x.Id)
            @Html.HiddenFor(x => x.CaseId)
            @Html.HiddenFor(x => x.CourtId)
            <div id="saveContainer">
                <partial name="_SaveFormContent" model="@("#saveContainer")" />
                @Html.EditorFor(x => x.CasePersonId, "GenericDropDown")
                @Html.EditorFor(x => x.LinkDirectionId, "GenericDropDown")
                @Html.EditorFor(x => x.CasePersonRelId, "GenericDropDown")
                @Html.EditorFor(x => x.LinkDirectionSecondId, "GenericDropDown")
                @Html.EditorFor(x => x.CasePersonSecondRelId, "GenericDropDown")

                @Html.EditorFor(x => x.DateFrom)
                @Html.EditorFor(x => x.DateTo)
            </div>

            <div class="form-group">
                @if (access.CanChange)
                {
                    <input type="submit" value="Запис" class="btn btn-success" />
                }
                @await Html.PartialAsync("_ButtonClose")
                <div class="pull-right">
                    @if (Model.DateExpired == null && access.CanChangeFull)
                    {
                        @await Html.PartialAsync("_ExpiredInfoButton", new ExpiredInfoVM() { Id = Model.Id, ReturnUrl = breadcrumbs.ReturnUrlFromLast(), DialogTitle = "Премахване на връзка", ExpireSubmitUrl = Url.Action("CasPersonLink_ExpiredInfo") })
                        <span>&nbsp;</span>
                    }
                    @if (Model.Id > 0)
                    {
                        @await Html.PartialAsync("_ShowLogOperation", new IOWebApplication.Core.Models.ShowLogModel() { ObjectKey = Model.Id.ToString() })
                    }
                </div>
            </div>
</form>
    </div>
</div>

<script>
        $(document).ready(function () {
            $('#CasePersonId').trigger('change');

        });

    $('#CasePersonId').change(function () {
        var personId = $(this).val();
        if (personId > 0) {
            requestGET_Json('@Url.Action("FilterLinkDirection", "CasePersonLink")', { casePersonId: personId }, function (model) {
                fillCombo(model.ddlLinkDirection, '#LinkDirectionId',@Model.LinkDirectionId);
            });
        }
    });
    $('#LinkDirectionId').change(function () {
        var linkId = $(this).val();
        var caseId = $("#CaseId").val();
        if (linkId > 0) {
            requestGET_Json('@Url.Action("FilterRelationalPerson","CasePersonLink")', { caseId: caseId, linkDirectionId: linkId }, function (model) {
                fillCombo(model.ddlPersonRel, '#CasePersonRelId',@Model.CasePersonRelId);
            });
        }
    });
</script>